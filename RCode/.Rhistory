mod.1 <- glm(Y ~ X + Z + G, family = poisson(link = "log"), df.ind)
mod.0 <- glm(Y ~ Z + G, family = poisson(link = "log"), df.ind)
MLE.ind[i,]<-c( mod.1$coefficients[1],mod.1$coefficients[2],mod.1$coefficients[3],mod.1$coefficients[4])#MLE.ABBA(data.ind)
MLE.null.ind[i,]<-c( mod.0$coefficients[1],theta.null,mod.0$coefficients[2],mod.0$coefficients[3])#MLE.ABBAnull(data = data.ind, seq.size = seq, eta.null=theta.null)
mean.est<-Mean.True(MLE.ind[i,],xmat_222)
IV.ind.i<-Matrix.IV(cros.type=cros_type[1], mle.values=MLE.ind[i,], x.mat=xmat_222, seq.size=seq, data=data.ind)
#correlated
data.cor<-Data.cor(cros.type = cros_type[1],mean.true =mean_true,seq.size =seq,cor.par = cor_par )
Y <- c(data.cor[,1],data.cor[,2],data.cor[,3],data.cor[,4])
df.cor = data.frame(Y,X,Z,G)
mod.1 <- glm(Y ~ X + Z + G, family = poisson(link = "log"), df.cor)
mod.0 <- glm(Y ~ Z + G, family = poisson(link = "log"), df.cor)
MLE.cor[i,]<-c( mod.1$coefficients[1],mod.1$coefficients[2],mod.1$coefficients[3],mod.1$coefficients[4])#MLE.ABBA(data.cor)
MLE.null.cor[i,]<-c( mod.0$coefficients[1],theta.null,mod.0$coefficients[2],mod.0$coefficients[3])#MLE.ABBAnull(data = data.ind, seq.size = seq, eta.null=theta.null)
mean.est<-Mean.True(MLE.cor[i,],xmat_222)
IV.cor.i<-Matrix.IV(cros.type=cros_type[1], mle.values=MLE.cor[i,], x.mat=xmat_222, seq.size=seq, data=data.cor)
#store result of MLE,I,V,inv.I
#MLE.ind[i,]<-MLE.ind.i
I.ind.i<-IV.ind.i$I.hat
V.ind.i<-Matrix::forceSymmetric(IV.ind.i$V.hat,uplo="L")
invI.ind.i<-solve(I.ind.i)
I.ind<-I.ind+I.ind.i
V.ind<-V.ind+V.ind.i
invI.ind<-invI.ind+invI.ind.i
#MLE.cor[i,]<-MLE.cor.i
I.cor.i<-IV.cor.i$I.hat
V.cor.i<-Matrix::forceSymmetric(IV.cor.i$V.hat,uplo="L")
invI.cor.i<-solve(I.cor.i)
I.cor<-I.cor+I.cor.i
V.cor<-V.cor+V.cor.i
invI.cor<-invI.cor+invI.cor.i
#=========================================================================
#output:matrix AB, Wald statistics,LR statistics, Score statistics
#=========================================================================
matA.ind.i[i]<-Matrix.AB(I.ind.i,as.matrix(V.ind.i),2)$Mat.A
matB.ind.i[i]<-Matrix.AB(I.ind.i,as.matrix(V.ind.i),2)$Mat.B
df.statistics.ind[i, "Wald.na"] <- seq*2*matA.ind.i[i]*(MLE.ind.i[,2]-theta.null)^2
df.statistics.ind[i, "Wald.rb"] <- seq*2*(matA.ind.i[i]^2)/matB.ind.i[i]*((MLE.ind.i[,2]-theta.null)^2)
df.statistics.ind[i, "LR.na"] <- 2*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null.ind[i,]),data = data.ind))
# df.statistics.ind[i, "LR.rb"] <- 2*matA.ind.i[i]/matB.ind.i[i]*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))
# #wald.test(Sigma = cov(MLE.ind), b = t(MLE.ind.i), Terms = 2)
MLE.null.cor[i,]<-MLE.ABBAnull(data = data.cor, seq.size = seq, eta.null=theta.null)
matA.cor.i[i]<-Matrix.AB(I.cor.i,as.matrix(V.cor.i),2)$Mat.A
matB.cor.i[i]<-Matrix.AB(I.cor.i,as.matrix(V.cor.i),2)$Mat.B
df.statistics.cor[i, "Wald.na"] <- seq*2*matA.cor.i[i]*(MLE.cor.i[,2]-theta.null)^2
df.statistics.cor[i, "Wald.rb"] <- seq*2*(matA.cor.i[i]^2)/matB.cor.i[i]*((MLE.cor.i[,2]-theta.null)^2)
df.statistics.cor[i, "LR.na"] <- 2*(loglik.ABBA(param = MLE.cor.i,data = data.cor)-loglik.ABBA(param = as.vector(MLE.null.cor[i,]),data = data.cor))
# df.statistics.cor[i, "LR.rb"] <- 2*matA.cor.i[i]/matB.cor.i[i]*(loglik.ABBA(param = MLE.cor.i,data = data.cor)-loglik.ABBA(param = as.vector(MLE.null),data = data.cor))
# #Wald.naive
# Wald.na.ind<-seq.size*2*Mat.A*(theta.hat-theta.null)^2
# #Wald.robust
# Wald.rb<-seq.size*2*(Mat.A^2)*((theta.hat-theta.null)^2)/Mat.B
# #LR.naive
# MLE.null<-MLE.ABBAnull(data = data.ind, seq.size = seq,eta.null=0)
# LR.na<-2*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))
# #LR.robust
# LR.rb<-2*Mat.A*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))/Mat.B
#
}
rm(list=ls(all=TRUE))
setwd("C:/Users/User/Documents/Study_CrossoverDesign/RCode")
#=============================================
#simulation parameter
#=============================================
sim_time=5000;cor_par=1/6
cros_type=c('ABBA','ABBBAA','AABABABAA','ABCBCACAB','BACACBBCA','BBAACBCAC')
#=============================================
#true value of params with treat-seq-time
#=============================================
param_222=c(0.2,0,-0.7,-0.2)
#=================================================
#Link of Yist:Y11,Y12,Y21,Y22
#row is vector of param,column is x.mat of Yist
#=================================================
#ABBAlog(0.5)
xmat_222=matrix(c(1,1,1,1, 0,1,1,0, 0,1,0,1, 0,0,1,1), nrow = 4, ncol = 4,byrow = TRUE)
mean_true=matrix(c(1.2,0.6,1.0,0.5), nrow = 1, ncol = 4,byrow = TRUE)
#========================================
#Function of output object
#========================================
#Par.values==TrueMean
Mean.True<-function(Par.values,x.mat){  return(exp(Par.values%*%x.mat))}
#Mean.True(Par.values=param_222,x.mat=xmat_222)
#I.true
Matrix.I<-function(cros.type,params,x.mat){
num.seq<-if (nchar(cros.type)==9) 3 else 2
mat.I<- matrix(0, nrow = length(params), ncol = length(params))
Mean<-Mean.True(Par.values=params,x.mat=x.mat)
for (i in 1:length(params) ){ mat.I[i,]<-Mean%*%(t(x.mat)*x.mat[i,])/num.seq}
return(mat.I)
}
#======================================================================
#Generate data
#======================================================================
Data.ind<-function(cros.type,mean.true,seq.size){
num.seq<-if (nchar(cros.type)==9) 3 else 2
data <-  matrix(0, nrow = seq.size, ncol = nchar(cros.type))
for (j in 1:length(mean.true)) {data[,j] =rpois(seq.size, lambda = mean.true[1,j])}
return(data)
}
#--------------------------------------------------------------------
Data.cor<-function(cros.type,mean.true,seq.size,cor.par){
num.seq<-if (nchar(cros.type)==9) 3 else 2
nui<-replicate(2,rgamma(n=seq.size,shape=1/cor.par,scale=cor.par))
mean.seq<-matrix(mean.true,ncol=nchar(cros.type)/num.seq,nrow=num.seq)
mean.cor<-list();data <-matrix(0, nrow = seq.size, ncol = nchar(cros.type))
for (i in 1:num.seq){
m<-split(c(outer(nui[,i],mean.seq[,i],  function(x, y) x * y)), ceiling(seq_along(c(outer(nui[,i],mean.seq[,i],  function(x, y) x * y)))/seq.size))
mean.cor<-append(mean.cor,m)
}
mean.cor<- t(matrix(unlist(mean.cor), ncol = seq.size, byrow = TRUE))
for (i in 1:nchar(cros.type)){
list_poisson <- unlist(lapply(mean.cor[,i], FUN = function(x, y) rpois(y, x), y = 1))
data[,i]<-list_poisson
}
return(data)
}
#--------------------------------------------------------------------
#======================================================================
#MLE of different type of crossover design
#======================================================================
##param<-c(tao,eta,gamma,delta)
MLE.ABBA<-function(data){
y.sum=colMeans(data)
tao.hat=log(y.sum[1])
eta.hat=0.5*(log(y.sum[2])+log(y.sum[3])-log(y.sum[1])-log(y.sum[4]))
gamma.hat=0.5*(log(y.sum[2])+log(y.sum[4])-log(y.sum[1])-log(y.sum[3]))
delta.hat=0.5*(log(y.sum[3])+log(y.sum[4])-log(y.sum[1])-log(y.sum[2]))
MLE.i = matrix(c(tao.hat, eta.hat, gamma.hat, delta.hat), nrow=1,ncol=4)
return(MLE.i)
}
#--------------------------------------------------------------------
#I.hat & V.hat
#--------------------------------------------------------------------
Matrix.IV<-function(cros.type,mle.values,x.mat,seq.size,data){
num.seq<-if (nchar(cros.type)==9) 3 else 2
mat.I<- matrix(0, nrow = length(mle.values), ncol = length(mle.values))
mat.V<- matrix(0, nrow = length(mle.values), ncol = length(mle.values))
mat.score<- matrix(0, nrow = seq.size, ncol = length(mle.values))
mean.est<-exp(mle.values%*%x.mat)
for (i in 1:length(mle.values) ){
mat.I[i,]<-mean.est%*%(t(x.mat)*x.mat[i,])/num.seq
mat.score[,i]<-sweep(data, 2, mean.est[1,])%*%x.mat[i,]
mat.V[i,]<- colSums(mat.score*mat.score[,i])/(seq.size*num.seq)
}
mat.V<-Matrix::forceSymmetric(mat.V,uplo="L")
list.IV <- list("I.hat" = mat.I, "V.hat" =mat.V)
return(list.IV)
}
#===================================================================
#Loglikelihood of ABBA,MLE.ABBA under H0,Matrix AB
#===================================================================
loglik.ABBA<-function(param,data){
ll=param[1]*sum(data[,1])-nrow(data)*exp(param[1])
+(param[1]+param[2]+param[3])*sum(data[,2])-nrow(data)*exp(param[1]+param[2]+param[3])
+(param[1]+param[2]+param[4])*sum(data[,3])-nrow(data)*exp(param[1]+param[2]+param[4])
+(param[1]+param[3]+param[4])*sum(data[,4])-nrow(data)*exp(param[1]+param[3]+param[4])
return(ll)
}
MLE.ABBAnull<-function(data,seq.size,eta.null){
y.sum=colMeans(data)
tao.hatnull<-log(y.sum[1])
gamma.hatnull=log(y.sum[2])-log(y.sum[1])-eta.null
delta.hatnull=log(y.sum[4])-log(y.sum[2])+eta.null
MLE.i.null = matrix(c(tao.hatnull,  eta.null, gamma.hatnull, delta.hatnull), nrow=1,ncol=4)
return(MLE.i.null)
}
Matrix.AB<-function(Mat.I,Mat.V,loc){
Mat.I<-I.ind.i
diag.I<-as.matrix(diag(Mat.I),byrow = TRUE)
diag.V<-as.matrix(diag(Mat.V),byrow = TRUE)
#I.theta.theta
I.tt<-diag.I[loc];V.tt<-diag.V[loc];I.pp<-Mat.I[-c(loc),-c(loc)];V.pp<-Mat.V[-c(loc),-c(loc)]
I.tp<-as.matrix(Mat.I[loc,]);I.tp<-as.matrix(I.tp[-c(loc),]);V.tp<-as.matrix(Mat.V[loc,]);V.tp<-as.matrix(V.tp[-c(loc),])
#mat.A
Mat.A<-I.tt-t(I.tp)%*%solve(I.pp)%*%I.tp
Mat.B<-V.tt-2*t(I.tp)%*%solve(I.pp)%*%V.tp+t(I.tp)%*%solve(I.pp)%*%V.pp%*%solve(I.pp)%*%I.tp
Mat.AB<- list("Mat.A" = Mat.A, "Mat.B" =Mat.B)
return(Mat.AB)
}
#========================================
#main
#result:to store result of each seq_size
#========================================
result.ind <- list();result.cor <- list();pvalue.ind<-list();pvalue.cor<-list()
#simulation for ABBA
seq=150
MLE.ind<-matrix(0, nrow = sim_time, ncol = length(param_222))
MLE.cor<-matrix(0, nrow = sim_time, ncol = length(param_222))
MLE.null.ind<-matrix(0, nrow = sim_time, ncol = length(param_222))
MLE.null.cor<-matrix(0, nrow = sim_time, ncol = length(param_222))
I.ind<- 0 ; I.cor<- 0 ; V.ind<-0 ;V.cor<-0;invI.ind<-0;invI.cor<-0
# Create df for statistics
statistics.columns <- c("Wald.na","Wald.rb","LR.na")
df.statistics.ind <- data.frame(matrix(nrow = sim_time, ncol = length(statistics.columns)))
colnames(df.statistics.ind) <- statistics.columns
df.statistics.cor = data.frame(matrix(nrow = sim_time, ncol = length(statistics.columns)))
colnames(df.statistics.cor) <- statistics.columns
matA.ind.i<-c();matB.ind.i<-c();matA.cor.i<-c();matB.cor.i<-c()
set.seed(7353)
for (i in 1:sim_time){
#====================================================
#I,V,IVI
#====================================================
theta.null=0
X = c(rep(0,seq), rep(1,2*seq), rep(0,seq))
Z = c(rep(0,seq), rep(1,seq), rep(0,seq), rep(1,seq))
G = c(rep(0,2*seq), rep(1,2*seq))
#independent
data.ind<-Data.ind(cros.type = cros_type[1],mean.true =mean_true,seq.size = seq )
Y <- c(data.ind[,1],data.ind[,2],data.ind[,3],data.ind[,4])
df.ind = data.frame(Y,X,Z,G)
mod.1 <- glm(Y ~ X + Z + G, family = poisson(link = "log"), df.ind)
mod.0 <- glm(Y ~ Z + G, family = poisson(link = "log"), df.ind)
MLE.ind[i,]<-c( mod.1$coefficients[1],mod.1$coefficients[2],mod.1$coefficients[3],mod.1$coefficients[4])#MLE.ABBA(data.ind)
MLE.null.ind[i,]<-c( mod.0$coefficients[1],theta.null,mod.0$coefficients[2],mod.0$coefficients[3])#MLE.ABBAnull(data = data.ind, seq.size = seq, eta.null=theta.null)
mean.est<-Mean.True(MLE.ind[i,],xmat_222)
IV.ind.i<-Matrix.IV(cros.type=cros_type[1], mle.values=MLE.ind[i,], x.mat=xmat_222, seq.size=seq, data=data.ind)
#correlated
data.cor<-Data.cor(cros.type = cros_type[1],mean.true =mean_true,seq.size =seq,cor.par = cor_par )
Y <- c(data.cor[,1],data.cor[,2],data.cor[,3],data.cor[,4])
df.cor = data.frame(Y,X,Z,G)
mod.1 <- glm(Y ~ X + Z + G, family = poisson(link = "log"), df.cor)
mod.0 <- glm(Y ~ Z + G, family = poisson(link = "log"), df.cor)
MLE.cor[i,]<-c( mod.1$coefficients[1],mod.1$coefficients[2],mod.1$coefficients[3],mod.1$coefficients[4])#MLE.ABBA(data.cor)
MLE.null.cor[i,]<-c( mod.0$coefficients[1],theta.null,mod.0$coefficients[2],mod.0$coefficients[3])#MLE.ABBAnull(data = data.ind, seq.size = seq, eta.null=theta.null)
mean.est<-Mean.True(MLE.cor[i,],xmat_222)
IV.cor.i<-Matrix.IV(cros.type=cros_type[1], mle.values=MLE.cor[i,], x.mat=xmat_222, seq.size=seq, data=data.cor)
#store result of MLE,I,V,inv.I
#MLE.ind[i,]<-MLE.ind.i
I.ind.i<-IV.ind.i$I.hat
V.ind.i<-Matrix::forceSymmetric(IV.ind.i$V.hat,uplo="L")
invI.ind.i<-solve(I.ind.i)
I.ind<-I.ind+I.ind.i
V.ind<-V.ind+V.ind.i
invI.ind<-invI.ind+invI.ind.i
#MLE.cor[i,]<-MLE.cor.i
I.cor.i<-IV.cor.i$I.hat
V.cor.i<-Matrix::forceSymmetric(IV.cor.i$V.hat,uplo="L")
invI.cor.i<-solve(I.cor.i)
I.cor<-I.cor+I.cor.i
V.cor<-V.cor+V.cor.i
invI.cor<-invI.cor+invI.cor.i
#=========================================================================
#output:matrix AB, Wald statistics,LR statistics, Score statistics
#=========================================================================
matA.ind.i[i]<-Matrix.AB(I.ind.i,as.matrix(V.ind.i),2)$Mat.A
matB.ind.i[i]<-Matrix.AB(I.ind.i,as.matrix(V.ind.i),2)$Mat.B
df.statistics.ind[i, "Wald.na"] <- seq*2*matA.ind.i[i]*(MLE.ind[i,2]-theta.null)^2
df.statistics.ind[i, "Wald.rb"] <- seq*2*(matA.ind.i[i]^2)/matB.ind.i[i]*((MLE.ind[i,2]-theta.null)^2)
df.statistics.ind[i, "LR.na"] <- 2*(loglik.ABBA(param = MLE.ind[i,],data = data.ind)-loglik.ABBA(param = as.vector(MLE.null.ind[i,]),data = data.ind))
# df.statistics.ind[i, "LR.rb"] <- 2*matA.ind.i[i]/matB.ind.i[i]*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))
# #wald.test(Sigma = cov(MLE.ind), b = t(MLE.ind.i), Terms = 2)
#MLE.null.cor[i,]<-MLE.ABBAnull(data = data.cor, seq.size = seq, eta.null=theta.null)
matA.cor.i[i]<-Matrix.AB(I.cor.i,as.matrix(V.cor.i),2)$Mat.A
matB.cor.i[i]<-Matrix.AB(I.cor.i,as.matrix(V.cor.i),2)$Mat.B
df.statistics.cor[i, "Wald.na"] <- seq*2*matA.cor.i[i]*(MLE.cor[i,2]-theta.null)^2
df.statistics.cor[i, "Wald.rb"] <- seq*2*(matA.cor.i[i]^2)/matB.cor.i[i]*((MLE.cor[i,2]-theta.null)^2)
df.statistics.cor[i, "LR.na"] <- 2*(loglik.ABBA(param = MLE.cor.i,data = data.cor)-loglik.ABBA(param = as.vector(MLE.null.cor[i,]),data = data.cor))
# df.statistics.cor[i, "LR.rb"] <- 2*matA.cor.i[i]/matB.cor.i[i]*(loglik.ABBA(param = MLE.cor.i,data = data.cor)-loglik.ABBA(param = as.vector(MLE.null),data = data.cor))
# #Wald.naive
# Wald.na.ind<-seq.size*2*Mat.A*(theta.hat-theta.null)^2
# #Wald.robust
# Wald.rb<-seq.size*2*(Mat.A^2)*((theta.hat-theta.null)^2)/Mat.B
# #LR.naive
# MLE.null<-MLE.ABBAnull(data = data.ind, seq.size = seq,eta.null=0)
# LR.na<-2*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))
# #LR.robust
# LR.rb<-2*Mat.A*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))/Mat.B
#
}
rm(list=ls(all=TRUE))
setwd("C:/Users/User/Documents/Study_CrossoverDesign/RCode")
#=============================================
#simulation parameter
#=============================================
sim_time=5000;cor_par=1/6
cros_type=c('ABBA','ABBBAA','AABABABAA','ABCBCACAB','BACACBBCA','BBAACBCAC')
#=============================================
#true value of params with treat-seq-time
#=============================================
param_222=c(0.2,0,-0.7,-0.2)
#=================================================
#Link of Yist:Y11,Y12,Y21,Y22
#row is vector of param,column is x.mat of Yist
#=================================================
#ABBAlog(0.5)
xmat_222=matrix(c(1,1,1,1, 0,1,1,0, 0,1,0,1, 0,0,1,1), nrow = 4, ncol = 4,byrow = TRUE)
mean_true=matrix(c(1.2,0.6,1.0,0.5), nrow = 1, ncol = 4,byrow = TRUE)
#========================================
#Function of output object
#========================================
#Par.values==TrueMean
Mean.True<-function(Par.values,x.mat){  return(exp(Par.values%*%x.mat))}
#Mean.True(Par.values=param_222,x.mat=xmat_222)
#I.true
Matrix.I<-function(cros.type,params,x.mat){
num.seq<-if (nchar(cros.type)==9) 3 else 2
mat.I<- matrix(0, nrow = length(params), ncol = length(params))
Mean<-Mean.True(Par.values=params,x.mat=x.mat)
for (i in 1:length(params) ){ mat.I[i,]<-Mean%*%(t(x.mat)*x.mat[i,])/num.seq}
return(mat.I)
}
#======================================================================
#Generate data
#======================================================================
Data.ind<-function(cros.type,mean.true,seq.size){
num.seq<-if (nchar(cros.type)==9) 3 else 2
data <-  matrix(0, nrow = seq.size, ncol = nchar(cros.type))
for (j in 1:length(mean.true)) {data[,j] =rpois(seq.size, lambda = mean.true[1,j])}
return(data)
}
#--------------------------------------------------------------------
Data.cor<-function(cros.type,mean.true,seq.size,cor.par){
num.seq<-if (nchar(cros.type)==9) 3 else 2
nui<-replicate(2,rgamma(n=seq.size,shape=1/cor.par,scale=cor.par))
mean.seq<-matrix(mean.true,ncol=nchar(cros.type)/num.seq,nrow=num.seq)
mean.cor<-list();data <-matrix(0, nrow = seq.size, ncol = nchar(cros.type))
for (i in 1:num.seq){
m<-split(c(outer(nui[,i],mean.seq[,i],  function(x, y) x * y)), ceiling(seq_along(c(outer(nui[,i],mean.seq[,i],  function(x, y) x * y)))/seq.size))
mean.cor<-append(mean.cor,m)
}
mean.cor<- t(matrix(unlist(mean.cor), ncol = seq.size, byrow = TRUE))
for (i in 1:nchar(cros.type)){
list_poisson <- unlist(lapply(mean.cor[,i], FUN = function(x, y) rpois(y, x), y = 1))
data[,i]<-list_poisson
}
return(data)
}
#--------------------------------------------------------------------
#======================================================================
#MLE of different type of crossover design
#======================================================================
##param<-c(tao,eta,gamma,delta)
MLE.ABBA<-function(data){
y.sum=colMeans(data)
tao.hat=log(y.sum[1])
eta.hat=0.5*(log(y.sum[2])+log(y.sum[3])-log(y.sum[1])-log(y.sum[4]))
gamma.hat=0.5*(log(y.sum[2])+log(y.sum[4])-log(y.sum[1])-log(y.sum[3]))
delta.hat=0.5*(log(y.sum[3])+log(y.sum[4])-log(y.sum[1])-log(y.sum[2]))
MLE.i = matrix(c(tao.hat, eta.hat, gamma.hat, delta.hat), nrow=1,ncol=4)
return(MLE.i)
}
#--------------------------------------------------------------------
#I.hat & V.hat
#--------------------------------------------------------------------
Matrix.IV<-function(cros.type,mle.values,x.mat,seq.size,data){
num.seq<-if (nchar(cros.type)==9) 3 else 2
mat.I<- matrix(0, nrow = length(mle.values), ncol = length(mle.values))
mat.V<- matrix(0, nrow = length(mle.values), ncol = length(mle.values))
mat.score<- matrix(0, nrow = seq.size, ncol = length(mle.values))
mean.est<-exp(mle.values%*%x.mat)
for (i in 1:length(mle.values) ){
mat.I[i,]<-mean.est%*%(t(x.mat)*x.mat[i,])/num.seq
mat.score[,i]<-sweep(data, 2, mean.est[1,])%*%x.mat[i,]
mat.V[i,]<- colSums(mat.score*mat.score[,i])/(seq.size*num.seq)
}
mat.V<-Matrix::forceSymmetric(mat.V,uplo="L")
list.IV <- list("I.hat" = mat.I, "V.hat" =mat.V)
return(list.IV)
}
#===================================================================
#Loglikelihood of ABBA,MLE.ABBA under H0,Matrix AB
#===================================================================
loglik.ABBA<-function(param,data){
ll=param[1]*sum(data[,1])-nrow(data)*exp(param[1])
+(param[1]+param[2]+param[3])*sum(data[,2])-nrow(data)*exp(param[1]+param[2]+param[3])
+(param[1]+param[2]+param[4])*sum(data[,3])-nrow(data)*exp(param[1]+param[2]+param[4])
+(param[1]+param[3]+param[4])*sum(data[,4])-nrow(data)*exp(param[1]+param[3]+param[4])
return(ll)
}
MLE.ABBAnull<-function(data,seq.size,eta.null){
y.sum=colMeans(data)
tao.hatnull<-log(y.sum[1])
gamma.hatnull=log(y.sum[2])-log(y.sum[1])-eta.null
delta.hatnull=log(y.sum[4])-log(y.sum[2])+eta.null
MLE.i.null = matrix(c(tao.hatnull,  eta.null, gamma.hatnull, delta.hatnull), nrow=1,ncol=4)
return(MLE.i.null)
}
Matrix.AB<-function(Mat.I,Mat.V,loc){
Mat.I<-I.ind.i
diag.I<-as.matrix(diag(Mat.I),byrow = TRUE)
diag.V<-as.matrix(diag(Mat.V),byrow = TRUE)
#I.theta.theta
I.tt<-diag.I[loc];V.tt<-diag.V[loc];I.pp<-Mat.I[-c(loc),-c(loc)];V.pp<-Mat.V[-c(loc),-c(loc)]
I.tp<-as.matrix(Mat.I[loc,]);I.tp<-as.matrix(I.tp[-c(loc),]);V.tp<-as.matrix(Mat.V[loc,]);V.tp<-as.matrix(V.tp[-c(loc),])
#mat.A
Mat.A<-I.tt-t(I.tp)%*%solve(I.pp)%*%I.tp
Mat.B<-V.tt-2*t(I.tp)%*%solve(I.pp)%*%V.tp+t(I.tp)%*%solve(I.pp)%*%V.pp%*%solve(I.pp)%*%I.tp
Mat.AB<- list("Mat.A" = Mat.A, "Mat.B" =Mat.B)
return(Mat.AB)
}
#========================================
#main
#result:to store result of each seq_size
#========================================
result.ind <- list();result.cor <- list();pvalue.ind<-list();pvalue.cor<-list()
#simulation for ABBA
seq=150
MLE.ind<-matrix(0, nrow = sim_time, ncol = length(param_222))
MLE.cor<-matrix(0, nrow = sim_time, ncol = length(param_222))
MLE.null.ind<-matrix(0, nrow = sim_time, ncol = length(param_222))
MLE.null.cor<-matrix(0, nrow = sim_time, ncol = length(param_222))
I.ind<- 0 ; I.cor<- 0 ; V.ind<-0 ;V.cor<-0;invI.ind<-0;invI.cor<-0
# Create df for statistics
statistics.columns <- c("Wald.na","Wald.rb","LR.na")
df.statistics.ind <- data.frame(matrix(nrow = sim_time, ncol = length(statistics.columns)))
colnames(df.statistics.ind) <- statistics.columns
df.statistics.cor = data.frame(matrix(nrow = sim_time, ncol = length(statistics.columns)))
colnames(df.statistics.cor) <- statistics.columns
matA.ind.i<-c();matB.ind.i<-c();matA.cor.i<-c();matB.cor.i<-c()
set.seed(7353)
for (i in 1:sim_time){
#====================================================
#I,V,IVI
#====================================================
theta.null=0
X = c(rep(0,seq), rep(1,2*seq), rep(0,seq))
Z = c(rep(0,seq), rep(1,seq), rep(0,seq), rep(1,seq))
G = c(rep(0,2*seq), rep(1,2*seq))
#independent
data.ind<-Data.ind(cros.type = cros_type[1],mean.true =mean_true,seq.size = seq )
Y <- c(data.ind[,1],data.ind[,2],data.ind[,3],data.ind[,4])
df.ind = data.frame(Y,X,Z,G)
mod.1 <- glm(Y ~ X + Z + G, family = poisson(link = "log"), df.ind)
mod.0 <- glm(Y ~ Z + G, family = poisson(link = "log"), df.ind)
MLE.ind[i,]<-c( mod.1$coefficients[1],mod.1$coefficients[2],mod.1$coefficients[3],mod.1$coefficients[4])#MLE.ABBA(data.ind)
MLE.null.ind[i,]<-c( mod.0$coefficients[1],theta.null,mod.0$coefficients[2],mod.0$coefficients[3])#MLE.ABBAnull(data = data.ind, seq.size = seq, eta.null=theta.null)
mean.est<-Mean.True(MLE.ind[i,],xmat_222)
IV.ind.i<-Matrix.IV(cros.type=cros_type[1], mle.values=MLE.ind[i,], x.mat=xmat_222, seq.size=seq, data=data.ind)
#correlated
data.cor<-Data.cor(cros.type = cros_type[1],mean.true =mean_true,seq.size =seq,cor.par = cor_par )
Y <- c(data.cor[,1],data.cor[,2],data.cor[,3],data.cor[,4])
df.cor = data.frame(Y,X,Z,G)
mod.1 <- glm(Y ~ X + Z + G, family = poisson(link = "log"), df.cor)
mod.0 <- glm(Y ~ Z + G, family = poisson(link = "log"), df.cor)
MLE.cor[i,]<-c( mod.1$coefficients[1],mod.1$coefficients[2],mod.1$coefficients[3],mod.1$coefficients[4])#MLE.ABBA(data.cor)
MLE.null.cor[i,]<-c( mod.0$coefficients[1],theta.null,mod.0$coefficients[2],mod.0$coefficients[3])#MLE.ABBAnull(data = data.ind, seq.size = seq, eta.null=theta.null)
mean.est<-Mean.True(MLE.cor[i,],xmat_222)
IV.cor.i<-Matrix.IV(cros.type=cros_type[1], mle.values=MLE.cor[i,], x.mat=xmat_222, seq.size=seq, data=data.cor)
#store result of MLE,I,V,inv.I
#MLE.ind[i,]<-MLE.ind.i
I.ind.i<-IV.ind.i$I.hat
V.ind.i<-Matrix::forceSymmetric(IV.ind.i$V.hat,uplo="L")
invI.ind.i<-solve(I.ind.i)
I.ind<-I.ind+I.ind.i
V.ind<-V.ind+V.ind.i
invI.ind<-invI.ind+invI.ind.i
#MLE.cor[i,]<-MLE.cor.i
I.cor.i<-IV.cor.i$I.hat
V.cor.i<-Matrix::forceSymmetric(IV.cor.i$V.hat,uplo="L")
invI.cor.i<-solve(I.cor.i)
I.cor<-I.cor+I.cor.i
V.cor<-V.cor+V.cor.i
invI.cor<-invI.cor+invI.cor.i
#=========================================================================
#output:matrix AB, Wald statistics,LR statistics, Score statistics
#=========================================================================
matA.ind.i[i]<-Matrix.AB(I.ind.i,as.matrix(V.ind.i),2)$Mat.A
matB.ind.i[i]<-Matrix.AB(I.ind.i,as.matrix(V.ind.i),2)$Mat.B
df.statistics.ind[i, "Wald.na"] <- seq*2*matA.ind.i[i]*(MLE.ind[i,2]-theta.null)^2
df.statistics.ind[i, "Wald.rb"] <- seq*2*(matA.ind.i[i]^2)/matB.ind.i[i]*((MLE.ind[i,2]-theta.null)^2)
df.statistics.ind[i, "LR.na"] <- 2*(loglik.ABBA(param = MLE.ind[i,],data = data.ind)-loglik.ABBA(param = as.vector(MLE.null.ind[i,]),data = data.ind))
# df.statistics.ind[i, "LR.rb"] <- 2*matA.ind.i[i]/matB.ind.i[i]*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))
# #wald.test(Sigma = cov(MLE.ind), b = t(MLE.ind.i), Terms = 2)
#MLE.null.cor[i,]<-MLE.ABBAnull(data = data.cor, seq.size = seq, eta.null=theta.null)
matA.cor.i[i]<-Matrix.AB(I.cor.i,as.matrix(V.cor.i),2)$Mat.A
matB.cor.i[i]<-Matrix.AB(I.cor.i,as.matrix(V.cor.i),2)$Mat.B
df.statistics.cor[i, "Wald.na"] <- seq*2*matA.cor.i[i]*(MLE.cor[i,2]-theta.null)^2
df.statistics.cor[i, "Wald.rb"] <- seq*2*(matA.cor.i[i]^2)/matB.cor.i[i]*((MLE.cor[i,2]-theta.null)^2)
df.statistics.cor[i, "LR.na"] <- 2*(loglik.ABBA(param = MLE.cor[i,],data = data.cor)-loglik.ABBA(param = as.vector(MLE.null.cor[i,]),data = data.cor))
# df.statistics.cor[i, "LR.rb"] <- 2*matA.cor.i[i]/matB.cor.i[i]*(loglik.ABBA(param = MLE.cor.i,data = data.cor)-loglik.ABBA(param = as.vector(MLE.null),data = data.cor))
# #Wald.naive
# Wald.na.ind<-seq.size*2*Mat.A*(theta.hat-theta.null)^2
# #Wald.robust
# Wald.rb<-seq.size*2*(Mat.A^2)*((theta.hat-theta.null)^2)/Mat.B
# #LR.naive
# MLE.null<-MLE.ABBAnull(data = data.ind, seq.size = seq,eta.null=0)
# LR.na<-2*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))
# #LR.robust
# LR.rb<-2*Mat.A*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))/Mat.B
#
}
#=========================================
#output for each seq.size:I, V, IVI
#=========================================
#store result in MATS for seq
MATS.ind <- list(signif(t(as.matrix(colMeans(MLE.ind))),5),signif(diag(cov(MLE.ind)),5),signif(mean(1/(2*seq*matA.ind.i)) ,5),signif(mean(matB.ind.i/(2*seq*matA.ind.i^2)) ,5))
MATS.cor <- list(signif(t(as.matrix(colMeans(MLE.cor))),5),signif(diag(cov(MLE.cor)),5),signif(mean(1/(2*seq*matA.cor.i)) ,5),signif(mean(matB.cor.i/(2*seq*matA.cor.i^2)) ,5))
#testing
below <- function(x) {return(length(x[x>qchisq(0.95,1)])/sim_time)}
print(paste('ind',seq,sapply(df.statistics.ind, below)))
print(paste('cor',seq,sapply(df.statistics.cor, below)))
# #Wald.naive
# Wald.na.ind<-seq.size*2*Mat.A*(theta.hat-theta.null)^2
# #Wald.robust
# Wald.rb<-seq.size*2*(Mat.A^2)*((theta.hat-theta.null)^2)/Mat.B
# #LR.naive
# MLE.null<-MLE.ABBAnull(data = data.ind, seq.size = seq,eta.null=0)
# LR.na<-2*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))
# #LR.robust
# LR.rb<-2*Mat.A*(loglik.ABBA(param = MLE.ind.i,data = data.ind)-loglik.ABBA(param = as.vector(MLE.null),data = data.ind))/Mat.B
#
sum(MLE.ind[1,])
sum(MLE.null.ind[1,])
loglik.ABBA(param = MLE.ind[1,],data = data.ind)
loglik.ABBA(param = as.vector(MLE.null.ind[1,]),data = data.ind)
View(df.statistics.ind)
View(df.statistics.cor)
View(MLE.ind)
View(MLE.null.cor)
2*(loglik.ABBA(param = MLE.ind[702,],data = data.ind)-loglik.ABBA(param = as.vector(MLE.null.ind[702,]),data = data.ind))
